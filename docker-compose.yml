version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cyberintel-postgres
    environment:
      POSTGRES_DB: cyber_threat_intelligence
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: cyberintel2024
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - cyberintel-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cyberintel-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cyberintel-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cyberintel-backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: cyber_threat_intelligence
      DB_USER: postgres
      DB_PASSWORD: cyberintel2024
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      CORS_ORIGIN: http://localhost:5173
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    networks:
      - cyberintel-network
    restart: unless-stopped
    volumes:
      - ./backend/logs:/app/logs

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: cyberintel-frontend
    environment:
      VITE_API_BASE_URL: http://localhost:3001/api/v1
      VITE_SOCKET_URL: http://localhost:3001
    ports:
      - "5173:5173"
    depends_on:
      - backend
    networks:
      - cyberintel-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: cyberintel-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - cyberintel-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  cyberintel-network:
    driver: bridge
